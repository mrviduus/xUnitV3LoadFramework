name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, v2-* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

defaults:
  run:
    shell: bash

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        global-json-file: global.json

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore --verbosity normal

    - name: Build solution
      run: dotnet build --no-restore --configuration Release --verbosity normal

    - name: Run unit tests
      run: dotnet test tests/xUnitV3LoadFrameworkTests --no-build --configuration Release --logger trx --collect:"XPlat Code Coverage" --results-directory ./TestResults

    - name: Run example tests (allow failures)
      run: |
        dotnet test examples/xUnitV3LoadTestsExamples --no-build --configuration Release --logger trx --collect:"XPlat Code Coverage" --results-directory ./TestResults || echo "Example tests failed, but continuing..."
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: TestResults/*.trx

  package:
    name: Create NuGet Package
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/v2-')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        global-json-file: global.json

    - name: Extract version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          VERSION="${GITHUB_REF#refs/tags/v}"
        else
          VERSION="2.0.0.${{ github.run_number }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Version set to: $VERSION"

    - name: Update .csproj with Version
      run: |
        sed -i 's|<Version>.*</Version>|<Version>${{ env.VERSION }}</Version>|' src/xUnitV3LoadFramework/xUnitV3LoadFramework.csproj
        echo "Updated version in .csproj to: ${{ env.VERSION }}"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Create NuGet package
      run: dotnet pack src/xUnitV3LoadFramework --no-build --configuration Release --output ./artifacts

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts/*.nupkg